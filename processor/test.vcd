$date
	Mon Apr 25 00:01:41 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module datapath $end
$var wire 1 ! PC_Wr_Comp2 $end
$var wire 1 " PC_Write_Combined $end
$var wire 16 # zero_pad_8 [15:0] $end
$var wire 16 $ zero_pad_4 [15:0] $end
$var wire 1 % zero_flag $end
$var wire 16 & sign_ext_ls [15:0] $end
$var wire 16 ' sign_ext_8 [15:0] $end
$var wire 16 ( sign_ext_12 [15:0] $end
$var wire 16 ) regouttest [15:0] $end
$var wire 16 * read_data_c [15:0] $end
$var wire 16 + read_data_b [15:0] $end
$var wire 16 , read_data_a [15:0] $end
$var wire 4 - p_state [3:0] $end
$var wire 1 . opcode_flag $end
$var wire 4 / opcode [3:0] $end
$var wire 4 0 n_state [3:0] $end
$var wire 16 1 instr_reg [15:0] $end
$var wire 4 2 func_field [3:0] $end
$var wire 16 3 data_reg [15:0] $end
$var wire 1 4 csig $end
$var wire 16 5 Reg_Wr_Data [15:0] $end
$var wire 4 6 Reg_Wr_Addr [3:0] $end
$var wire 1 7 Reg_Wr $end
$var wire 1 8 Reg_Dst $end
$var wire 1 9 RegC_Sel $end
$var wire 4 : RegC [3:0] $end
$var wire 4 ; RegB [3:0] $end
$var wire 2 < RegA_Sel [1:0] $end
$var wire 4 = RegA [3:0] $end
$var wire 2 > PC_Wr_Cond [1:0] $end
$var wire 1 ? PC_Wr_Comp1 $end
$var wire 1 @ PC_Wr $end
$var wire 1 A PC_Sel $end
$var wire 16 B PCReg [15:0] $end
$var wire 1 C Mem_to_Reg $end
$var wire 1 D IM_Read $end
$var wire 1 E Data_Src $end
$var wire 1 F DM_Wr $end
$var wire 1 G DM_Read $end
$var wire 3 H ALU_Src_B [2:0] $end
$var wire 2 I ALU_Src_A [1:0] $end
$var wire 16 J ALUOut [15:0] $end
$var wire 3 K ALUCtrl [2:0] $end
$var reg 16 L ALUOut_Reg [15:0] $end
$var reg 16 M ALU_inA [15:0] $end
$var reg 16 N ALU_inB [15:0] $end
$var reg 1 O clk $end
$scope module a1 $end
$var wire 16 P SrcA [15:0] $end
$var wire 16 Q SrcB [15:0] $end
$var wire 16 R temp_outF [15:0] $end
$var wire 16 S temp_outE [15:0] $end
$var wire 16 T temp_outD [15:0] $end
$var wire 16 U temp_outC [15:0] $end
$var wire 16 V temp_outB [15:0] $end
$var wire 16 W temp_outA [15:0] $end
$var wire 16 X temp_inB [15:0] $end
$var wire 1 Y carry_out $end
$var wire 3 Z ALUCtrl [2:0] $end
$var reg 16 [ ALUOut [15:0] $end
$var reg 1 \ cin $end
$var reg 1 % zero_flag $end
$scope module n1 $end
$var wire 16 ] in1 [15:0] $end
$var wire 16 ^ in2 [15:0] $end
$var wire 16 _ out [15:0] $end
$upscope $end
$scope module o1 $end
$var wire 16 ` in1 [15:0] $end
$var wire 16 a in2 [15:0] $end
$var wire 16 b out [15:0] $end
$upscope $end
$scope module s1 $end
$var wire 16 c A [15:0] $end
$var wire 16 d B [15:0] $end
$var wire 1 \ cin $end
$var wire 1 Y cout $end
$var wire 16 e c [15:0] $end
$var wire 16 f Sum [15:0] $end
$scope module f0 $end
$var wire 1 g a $end
$var wire 1 h b $end
$var wire 1 \ cin $end
$var wire 1 i cout $end
$var wire 1 j sum $end
$upscope $end
$scope module f1 $end
$var wire 1 k a $end
$var wire 1 l b $end
$var wire 1 m cin $end
$var wire 1 n cout $end
$var wire 1 o sum $end
$upscope $end
$scope module f10 $end
$var wire 1 p a $end
$var wire 1 q b $end
$var wire 1 r cin $end
$var wire 1 s cout $end
$var wire 1 t sum $end
$upscope $end
$scope module f11 $end
$var wire 1 u a $end
$var wire 1 v b $end
$var wire 1 w cin $end
$var wire 1 x cout $end
$var wire 1 y sum $end
$upscope $end
$scope module f12 $end
$var wire 1 z a $end
$var wire 1 { b $end
$var wire 1 | cin $end
$var wire 1 } cout $end
$var wire 1 ~ sum $end
$upscope $end
$scope module f13 $end
$var wire 1 !" a $end
$var wire 1 "" b $end
$var wire 1 #" cin $end
$var wire 1 $" cout $end
$var wire 1 %" sum $end
$upscope $end
$scope module f14 $end
$var wire 1 &" a $end
$var wire 1 '" b $end
$var wire 1 (" cin $end
$var wire 1 )" cout $end
$var wire 1 *" sum $end
$upscope $end
$scope module f15 $end
$var wire 1 +" a $end
$var wire 1 ," b $end
$var wire 1 -" cin $end
$var wire 1 ." cout $end
$var wire 1 /" sum $end
$upscope $end
$scope module f2 $end
$var wire 1 0" a $end
$var wire 1 1" b $end
$var wire 1 2" cin $end
$var wire 1 3" cout $end
$var wire 1 4" sum $end
$upscope $end
$scope module f3 $end
$var wire 1 5" a $end
$var wire 1 6" b $end
$var wire 1 7" cin $end
$var wire 1 8" cout $end
$var wire 1 9" sum $end
$upscope $end
$scope module f4 $end
$var wire 1 :" a $end
$var wire 1 ;" b $end
$var wire 1 <" cin $end
$var wire 1 =" cout $end
$var wire 1 >" sum $end
$upscope $end
$scope module f5 $end
$var wire 1 ?" a $end
$var wire 1 @" b $end
$var wire 1 A" cin $end
$var wire 1 B" cout $end
$var wire 1 C" sum $end
$upscope $end
$scope module f6 $end
$var wire 1 D" a $end
$var wire 1 E" b $end
$var wire 1 F" cin $end
$var wire 1 G" cout $end
$var wire 1 H" sum $end
$upscope $end
$scope module f7 $end
$var wire 1 I" a $end
$var wire 1 J" b $end
$var wire 1 K" cin $end
$var wire 1 L" cout $end
$var wire 1 M" sum $end
$upscope $end
$scope module f8 $end
$var wire 1 N" a $end
$var wire 1 O" b $end
$var wire 1 P" cin $end
$var wire 1 Q" cout $end
$var wire 1 R" sum $end
$upscope $end
$scope module f9 $end
$var wire 1 S" a $end
$var wire 1 T" b $end
$var wire 1 U" cin $end
$var wire 1 V" cout $end
$var wire 1 W" sum $end
$upscope $end
$upscope $end
$scope module s2 $end
$var wire 16 X" in [15:0] $end
$var wire 4 Y" sel [3:0] $end
$var wire 16 Z" q [15:0] $end
$scope module m0 $end
$var wire 16 [" in [15:0] $end
$var wire 4 \" sel [3:0] $end
$var reg 1 ]" y $end
$upscope $end
$scope module m1 $end
$var wire 16 ^" in [15:0] $end
$var wire 4 _" sel [3:0] $end
$var reg 1 `" y $end
$upscope $end
$scope module m10 $end
$var wire 16 a" in [15:0] $end
$var wire 4 b" sel [3:0] $end
$var reg 1 c" y $end
$upscope $end
$scope module m11 $end
$var wire 16 d" in [15:0] $end
$var wire 4 e" sel [3:0] $end
$var reg 1 f" y $end
$upscope $end
$scope module m12 $end
$var wire 16 g" in [15:0] $end
$var wire 4 h" sel [3:0] $end
$var reg 1 i" y $end
$upscope $end
$scope module m13 $end
$var wire 16 j" in [15:0] $end
$var wire 4 k" sel [3:0] $end
$var reg 1 l" y $end
$upscope $end
$scope module m14 $end
$var wire 16 m" in [15:0] $end
$var wire 4 n" sel [3:0] $end
$var reg 1 o" y $end
$upscope $end
$scope module m15 $end
$var wire 16 p" in [15:0] $end
$var wire 4 q" sel [3:0] $end
$var reg 1 r" y $end
$upscope $end
$scope module m2 $end
$var wire 16 s" in [15:0] $end
$var wire 4 t" sel [3:0] $end
$var reg 1 u" y $end
$upscope $end
$scope module m3 $end
$var wire 16 v" in [15:0] $end
$var wire 4 w" sel [3:0] $end
$var reg 1 x" y $end
$upscope $end
$scope module m4 $end
$var wire 16 y" in [15:0] $end
$var wire 4 z" sel [3:0] $end
$var reg 1 {" y $end
$upscope $end
$scope module m5 $end
$var wire 16 |" in [15:0] $end
$var wire 4 }" sel [3:0] $end
$var reg 1 ~" y $end
$upscope $end
$scope module m6 $end
$var wire 16 !# in [15:0] $end
$var wire 4 "# sel [3:0] $end
$var reg 1 ## y $end
$upscope $end
$scope module m7 $end
$var wire 16 $# in [15:0] $end
$var wire 4 %# sel [3:0] $end
$var reg 1 &# y $end
$upscope $end
$scope module m8 $end
$var wire 16 '# in [15:0] $end
$var wire 4 (# sel [3:0] $end
$var reg 1 )# y $end
$upscope $end
$scope module m9 $end
$var wire 16 *# in [15:0] $end
$var wire 4 +# sel [3:0] $end
$var reg 1 ,# y $end
$upscope $end
$upscope $end
$scope module s3 $end
$var wire 16 -# in [15:0] $end
$var wire 4 .# sel [3:0] $end
$var wire 16 /# q [15:0] $end
$scope module m0 $end
$var wire 16 0# in [15:0] $end
$var wire 4 1# sel [3:0] $end
$var reg 1 2# y $end
$upscope $end
$scope module m1 $end
$var wire 16 3# in [15:0] $end
$var wire 4 4# sel [3:0] $end
$var reg 1 5# y $end
$upscope $end
$scope module m10 $end
$var wire 16 6# in [15:0] $end
$var wire 4 7# sel [3:0] $end
$var reg 1 8# y $end
$upscope $end
$scope module m11 $end
$var wire 16 9# in [15:0] $end
$var wire 4 :# sel [3:0] $end
$var reg 1 ;# y $end
$upscope $end
$scope module m12 $end
$var wire 16 <# in [15:0] $end
$var wire 4 =# sel [3:0] $end
$var reg 1 ># y $end
$upscope $end
$scope module m13 $end
$var wire 16 ?# in [15:0] $end
$var wire 4 @# sel [3:0] $end
$var reg 1 A# y $end
$upscope $end
$scope module m14 $end
$var wire 16 B# in [15:0] $end
$var wire 4 C# sel [3:0] $end
$var reg 1 D# y $end
$upscope $end
$scope module m15 $end
$var wire 16 E# in [15:0] $end
$var wire 4 F# sel [3:0] $end
$var reg 1 G# y $end
$upscope $end
$scope module m2 $end
$var wire 16 H# in [15:0] $end
$var wire 4 I# sel [3:0] $end
$var reg 1 J# y $end
$upscope $end
$scope module m3 $end
$var wire 16 K# in [15:0] $end
$var wire 4 L# sel [3:0] $end
$var reg 1 M# y $end
$upscope $end
$scope module m4 $end
$var wire 16 N# in [15:0] $end
$var wire 4 O# sel [3:0] $end
$var reg 1 P# y $end
$upscope $end
$scope module m5 $end
$var wire 16 Q# in [15:0] $end
$var wire 4 R# sel [3:0] $end
$var reg 1 S# y $end
$upscope $end
$scope module m6 $end
$var wire 16 T# in [15:0] $end
$var wire 4 U# sel [3:0] $end
$var reg 1 V# y $end
$upscope $end
$scope module m7 $end
$var wire 16 W# in [15:0] $end
$var wire 4 X# sel [3:0] $end
$var reg 1 Y# y $end
$upscope $end
$scope module m8 $end
$var wire 16 Z# in [15:0] $end
$var wire 4 [# sel [3:0] $end
$var reg 1 \# y $end
$upscope $end
$scope module m9 $end
$var wire 16 ]# in [15:0] $end
$var wire 4 ^# sel [3:0] $end
$var reg 1 _# y $end
$upscope $end
$upscope $end
$scope module s4 $end
$var wire 16 `# in [15:0] $end
$var wire 4 a# sel [3:0] $end
$var wire 16 b# q [15:0] $end
$scope module m0 $end
$var wire 16 c# in [15:0] $end
$var wire 4 d# sel [3:0] $end
$var reg 1 e# y $end
$upscope $end
$scope module m1 $end
$var wire 16 f# in [15:0] $end
$var wire 4 g# sel [3:0] $end
$var reg 1 h# y $end
$upscope $end
$scope module m10 $end
$var wire 16 i# in [15:0] $end
$var wire 4 j# sel [3:0] $end
$var reg 1 k# y $end
$upscope $end
$scope module m11 $end
$var wire 16 l# in [15:0] $end
$var wire 4 m# sel [3:0] $end
$var reg 1 n# y $end
$upscope $end
$scope module m12 $end
$var wire 16 o# in [15:0] $end
$var wire 4 p# sel [3:0] $end
$var reg 1 q# y $end
$upscope $end
$scope module m13 $end
$var wire 16 r# in [15:0] $end
$var wire 4 s# sel [3:0] $end
$var reg 1 t# y $end
$upscope $end
$scope module m14 $end
$var wire 16 u# in [15:0] $end
$var wire 4 v# sel [3:0] $end
$var reg 1 w# y $end
$upscope $end
$scope module m15 $end
$var wire 16 x# in [15:0] $end
$var wire 4 y# sel [3:0] $end
$var reg 1 z# y $end
$upscope $end
$scope module m2 $end
$var wire 16 {# in [15:0] $end
$var wire 4 |# sel [3:0] $end
$var reg 1 }# y $end
$upscope $end
$scope module m3 $end
$var wire 16 ~# in [15:0] $end
$var wire 4 !$ sel [3:0] $end
$var reg 1 "$ y $end
$upscope $end
$scope module m4 $end
$var wire 16 #$ in [15:0] $end
$var wire 4 $$ sel [3:0] $end
$var reg 1 %$ y $end
$upscope $end
$scope module m5 $end
$var wire 16 &$ in [15:0] $end
$var wire 4 '$ sel [3:0] $end
$var reg 1 ($ y $end
$upscope $end
$scope module m6 $end
$var wire 16 )$ in [15:0] $end
$var wire 4 *$ sel [3:0] $end
$var reg 1 +$ y $end
$upscope $end
$scope module m7 $end
$var wire 16 ,$ in [15:0] $end
$var wire 4 -$ sel [3:0] $end
$var reg 1 .$ y $end
$upscope $end
$scope module m8 $end
$var wire 16 /$ in [15:0] $end
$var wire 4 0$ sel [3:0] $end
$var reg 1 1$ y $end
$upscope $end
$scope module m9 $end
$var wire 16 2$ in [15:0] $end
$var wire 4 3$ sel [3:0] $end
$var reg 1 4$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope module ac1 $end
$var wire 4 5$ func_field [3:0] $end
$var wire 4 6$ op [3:0] $end
$var wire 1 7$ select $end
$var wire 1 4 csig $end
$var wire 3 8$ alu_ctrl [2:0] $end
$upscope $end
$scope module c1 $end
$var wire 1 O clk $end
$var wire 4 9$ opcode [3:0] $end
$var reg 2 :$ ALU_Src_A [1:0] $end
$var reg 3 ;$ ALU_Src_B [2:0] $end
$var reg 1 G DM_Read $end
$var reg 1 F DM_Wr $end
$var reg 1 E Data_Src $end
$var reg 1 D IM_Read $end
$var reg 1 C Mem_to_Reg $end
$var reg 1 A PC_Sel $end
$var reg 1 @ PC_Wr $end
$var reg 2 <$ PC_Wr_Cond [1:0] $end
$var reg 2 =$ RegA_Sel [1:0] $end
$var reg 1 9 RegC_Sel $end
$var reg 1 8 Reg_Dst $end
$var reg 1 7 Reg_Wr $end
$var reg 1 4 csig $end
$var reg 4 >$ n_state [3:0] $end
$var reg 1 . opcode_flag $end
$var reg 4 ?$ p_state [3:0] $end
$upscope $end
$scope module d1 $end
$var wire 16 @$ addr [15:0] $end
$var wire 1 G dm_read $end
$var wire 1 F dm_wr $end
$var wire 16 A$ wr_data [15:0] $end
$var reg 16 B$ data_reg [15:0] $end
$upscope $end
$scope module im1 $end
$var wire 1 D im_read $end
$var wire 16 C$ pc [15:0] $end
$var reg 16 D$ instr_reg [15:0] $end
$upscope $end
$scope module m1 $end
$var wire 4 E$ a [3:0] $end
$var wire 4 F$ b [3:0] $end
$var wire 4 G$ c [3:0] $end
$var wire 4 H$ d [3:0] $end
$var wire 2 I$ sel [1:0] $end
$var wire 4 J$ out [3:0] $end
$upscope $end
$scope module m2 $end
$var wire 4 K$ a [3:0] $end
$var wire 4 L$ b [3:0] $end
$var wire 4 M$ c [3:0] $end
$var wire 4 N$ d [3:0] $end
$var wire 2 O$ sel [1:0] $end
$var wire 4 P$ out [3:0] $end
$upscope $end
$scope module m3 $end
$var wire 4 Q$ a [3:0] $end
$var wire 4 R$ b [3:0] $end
$var wire 4 S$ c [3:0] $end
$var wire 4 T$ d [3:0] $end
$var wire 2 U$ sel [1:0] $end
$var wire 4 V$ out [3:0] $end
$upscope $end
$scope module m4 $end
$var wire 16 W$ a [15:0] $end
$var wire 1 C sel $end
$var wire 16 X$ out [15:0] $end
$var wire 16 Y$ b [15:0] $end
$upscope $end
$scope module p1 $end
$var wire 1 A PCSel $end
$var wire 1 " PCcombined $end
$var wire 16 Z$ aluout [15:0] $end
$var wire 16 [$ read_data_c [15:0] $end
$var reg 16 \$ pcreg [15:0] $end
$upscope $end
$scope module r1 $end
$var wire 4 ]$ read_addr_1 [3:0] $end
$var wire 4 ^$ read_addr_2 [3:0] $end
$var wire 4 _$ read_addr_3 [3:0] $end
$var wire 1 7 reg_wr $end
$var wire 4 `$ write_addr [3:0] $end
$var wire 16 a$ write_data [15:0] $end
$var reg 16 b$ read_data_a [15:0] $end
$var reg 16 c$ read_data_b [15:0] $end
$var reg 16 d$ read_data_c [15:0] $end
$var reg 16 e$ regouttest [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx e$
bx d$
bx c$
bx b$
bx a$
bx `$
bx _$
bx ^$
bx ]$
bx \$
bx [$
b0 Z$
bx Y$
bx X$
bx W$
bx V$
b0x U$
b0 T$
b0 S$
bx R$
b11xx Q$
bx P$
b0x O$
b0 N$
b0 M$
b11xx L$
bx K$
bx J$
bx I$
b0 H$
b10xx G$
bx F$
bx E$
bx D$
bx C$
bx B$
bx A$
b0 @$
b0 ?$
bx >$
bx =$
bx <$
bx ;$
bx :$
bx 9$
bx 8$
x7$
bx 6$
bx 5$
x4$
b10 3$
bx 2$
x1$
b10 0$
bx /$
x.$
b10 -$
bx ,$
x+$
b10 *$
bx )$
x($
b10 '$
bx &$
x%$
b10 $$
bx #$
x"$
b10 !$
bx ~#
x}#
b10 |#
bx {#
xz#
b10 y#
bx x#
xw#
b10 v#
bx u#
xt#
b10 s#
bx r#
xq#
b10 p#
bx o#
xn#
b10 m#
bx l#
xk#
b10 j#
bx i#
xh#
b10 g#
bx f#
xe#
b10 d#
bx c#
bx b#
b10 a#
bx `#
x_#
b10 ^#
b0xxxxxxx ]#
x\#
b10 [#
b0xxxxxxxx Z#
xY#
b10 X#
b0xxxxxxxxx W#
xV#
b10 U#
b0xxxxxxxxxx T#
xS#
b10 R#
b0xxxxxxxxxxx Q#
xP#
b10 O#
b0xxxxxxxxxxxx N#
xM#
b10 L#
b0xxxxxxxxxxxxx K#
xJ#
b10 I#
b0xxxxxxxxxxxxxx H#
0G#
b10 F#
b0x E#
0D#
b10 C#
b0xx B#
xA#
b10 @#
b0xxx ?#
x>#
b10 =#
b0xxxx <#
x;#
b10 :#
b0xxxxx 9#
x8#
b10 7#
b0xxxxxx 6#
x5#
b10 4#
b0xxxxxxxxxxxxxxx 3#
x2#
b10 1#
bx 0#
b0xxxxxxxxxxxxxx /#
b10 .#
bx -#
x,#
b10 +#
bx000000 *#
x)#
b10 (#
bx0000000 '#
x&#
b10 %#
bx00000000 $#
x##
b10 "#
bx000000000 !#
x~"
b10 }"
bx0000000000 |"
x{"
b10 z"
bx00000000000 y"
xx"
b10 w"
bx000000000000 v"
xu"
b10 t"
bx0000000000000 s"
xr"
b10 q"
bx p"
xo"
b10 n"
bx0 m"
xl"
b10 k"
bx00 j"
xi"
b10 h"
bx000 g"
xf"
b10 e"
bx0000 d"
xc"
b10 b"
bx00000 a"
0`"
b10 _"
bx00000000000000 ^"
0]"
b10 \"
bx000000000000000 ["
bx00 Z"
b10 Y"
bx X"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
bx f
bx e
bx d
bx c
bx1x b
b10 a
bx `
b11111111111111x1 _
b10 ^
bx ]
x\
b0 [
bx Z
xY
bx X
bx W
bx1x V
b11111111111111x1 U
bx00 T
b0xxxxxxxxxxxxxx S
bx R
b10 Q
bx P
1O
b10 N
bx M
b0 L
bx K
b0 J
bx I
bx H
xG
xF
xE
xD
xC
bx B
xA
x@
x?
bx >
bx =
bx <
bx ;
bx :
x9
x8
x7
bx 6
bx 5
x4
bx 3
bx 2
bx 1
bx 0
bx /
0.
b0 -
bx ,
bx +
bx *
bx )
bx (
bx '
bx0 &
1%
b0xxxx $
b0xxxxxxxx #
x"
x!
$end
#1
b1111111111111111 U
b1111111111111111 _
b10 V
b10 b
0g
0k
00"
05"
0:"
0?"
0D"
0I"
0N"
0S"
0p
0u
0z
0!"
0&"
0+"
b0 ["
b0 ^"
b0 s"
b0 v"
b0 y"
b0 |"
b0 !#
b0 $#
b0 '#
b0 *#
b0 a"
b0 d"
b0 g"
b0 j"
b0 m"
b0 3#
b0 H#
b0 K#
b0 N#
b0 Q#
b0 T#
b0 W#
b0 Z#
b0 ]#
b0 6#
b0 9#
b0 <#
b0 ?#
b0 B#
b0 E#
b0 f#
b0 {#
b0 ~#
b0 #$
b0 &$
b0 )$
b0 ,$
b0 /$
b0 2$
b0 i#
b0 l#
b0 o#
b0 r#
b0 u#
b0 x#
b11xx 6
b11xx V$
b11xx `$
b0 M
b0 P
b0 ]
b0 `
b0 c
b0 X"
b0 p"
b0 -#
b0 0#
b0 `#
b0 c#
b0 B
b0 C$
b0 \$
b0 0
b0 >$
1!
1"
0.
b0 O$
09
b0 <
b0 =$
b0 I$
b1 -
b1 ?$
b1 H
b1 ;$
b0 I
b0 :$
0?
b0 >
b0 <$
1E
07
0C
b0 U$
08
0F
0G
1D
1@
0A
0O
#2
1O
#3
b0 -
b0 ?$
0D
0@
0O
